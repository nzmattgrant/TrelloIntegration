
@{
    var token = Session["trello_token"];
}

<style>
    .gray {
        //background-color: gainsboro;
        padding: -2px;
    }

    .white {
        //background-color: white;
        padding: -2px;
    }
</style>


<script src="~/Scripts/angular.min.js"></script>
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />

<div ng-controller="TrelloCtrl as vm">
    <div class="container">
        <div class="row">
            <div class="col-lg-10">
                <h1>Your Trello boards</h1>
            </div>
            <div class="col-lg-2">
                <button class="btn-primary btn-lg btn-block" ng-click="logout()">Log out</button>
            </div>
        </div>

        <div class="well" ng-repeat="board in vm.boards">
            <div ng-click="board.isCollapsed = !board.isCollapsed">
                <h2>
                    {{board.name}}
                    <span ng-show="board.isCollapsed" class="pull-right glyphicon glyphicon-plus"></span>
                    <span ng-show="!board.isCollapsed" class="pull-right glyphicon glyphicon-minus"></span>
                </h2>

            </div>
            <div class="well" ng-repeat="list in board.lists" ng-hide="board.isCollapsed">
                <h3 ng-click="list.isCollapsed = !list.isCollapsed">
                    {{list.name}}
                    <span ng-show="list.isCollapsed" class="pull-right glyphicon glyphicon-plus"></span>
                    <span ng-show="!list.isCollapsed" class="pull-right glyphicon glyphicon-minus"></span>
                </h3>
                <div class="well" ng-repeat="card in list.cards" ng-hide="list.isCollapsed">
                    <h4 ng-click="card.isCollapsed = !card.isCollapsed">
                        {{card.name}}
                        <span ng-show="card.isCollapsed" class="pull-right glyphicon glyphicon-plus"></span>
                        <span ng-show="!card.isCollapsed" class="pull-right glyphicon glyphicon-minus"></span>
                    </h4>
                    <div class="well comments white" ng-hide="card.isCollapsed">
                        <div ng-repeat="comment in card.comments">
                            <span>{{comment.data.text}}</span>
                        </div>
                        <form ng-submit="addComment(card)">
                            <input type="text" ng-model="card.newComment">
                            <button type="submit" ng-click="addComment(card)">Add Comment</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

    </div>


</div>
@*<div class="container">
    <div class="list-group well">
        <div class="list-group-item-heading">
            Heading
        </div>
        <div class="list-group-item">
            <div class="list-group">
                <div class="list-group-item-heading">
                    Heading again
                </div>
                <div class="list-group-item">
                    hello
                </div>
                <div class="list-group-item">
                    hello
                </div>
            </div>

        </div>
        <div class="list-group-item">
            <div class="list-group">
                <div class="list-group-item-heading">
                    Heading again again
                </div>
                <div class="list-group-item">
                    Yo yo yo
                </div>
            </div>
        </div>
    </div>
</div>*@
<script>
    //TODO put into scripts
    //<div>Your Token is <span id="token">{{vm.token}}</span></div>
    angular.module('app', []);

    angular
        .module('app')
        .controller('TrelloCtrl', ['$scope', '$http', TrelloCtrl])

    function TrelloCtrl($scope, $http) {
        var vm = this;


        vm.token = "@token";//TODO Bind using angular later
        vm.apiBase = "https://api.trello.com/1/";
        vm.applicationKey = "fed9c5de2188e9af5f1ca25c1af501ab";
        var apiTokenSuffix = "tokens/" + vm.token + "?key=" + vm.applicationKey;

        $scope.logout = function () {
            //TODO update the url to be the action
            $http.post("/Home/Logout").success(function (returnData) {
                if (returnData.ok)
                    window.location = returnData.newurl;
            });
        };

        $scope.addComment = function (card) {
            //take the text from the comment
            if (!card.newComment)
                return;

            $http.post(vm.apiBase + "cards/" + card.id + "/actions/comments?key=" + vm.applicationKey + "&token=" + vm.token, { text: card.newComment });
            //TODO add error handling
            card.comments.unshift({ data: { text: card.newComment } });
            card.newComment = "";
        };

        //Get the userID for getting all the boards etc. (Maybe we only need one call here so we can get everything with the boards)
        $http.get(vm.apiBase + "tokens/" + vm.token + "?key=" + vm.applicationKey)
            .then(function (response) {
                vm.memberID = response.data.idMember;
                //TODO get rid of all the nesting
                //Get all the boards
                $http.get(vm.apiBase + "members/" + vm.memberID + "/boards?key=" + vm.applicationKey + "&token=" + vm.token)
                   .then(function (response) {
                       vm.boards = response.data;
                       //Get all the lists
                       angular.forEach(vm.boards, function (board, key) {
                           board.isCollapsed = true;
                           $http.get(vm.apiBase + "boards/" + board.id + "?lists=open&list_fields=name&fields=name&key=" + vm.applicationKey + "&token=" + vm.token)
                              .then(function (response) {
                                  board.lists = response.data.lists;
                                  //Get all the cards
                                  angular.forEach(board.lists, function (list, key) {
                                      list.isCollapsed = true;
                                      $http.get(vm.apiBase + "lists/" + list.id + "?cards=open&card_fields=name&key=" + vm.applicationKey + "&token=" + vm.token)
                                         .then(function (response) {
                                             list.cards = response.data.cards;
                                             //Get all the comments
                                             angular.forEach(list.cards, function (card, key) {
                                                 card.isCollapsed = true;
                                                 card.newComment = "";//Init the comment entry
                                                 $http.get(vm.apiBase + "cards/" + card.id + "/actions?key=" + vm.applicationKey + "&token=" + vm.token)
                                                    .then(function (response) {
                                                        card.comments = response.data.filter(function (action) { return action.type == "commentCard" });
                                                    });
                                             });

                                         });
                                  });
                              });
                       });
                   });
            });


    }

    //var getMemberURL = vm.apiBase + "tokens/" + vm.token + "?key=" + vm.applicationKey;
    //var getBoardsURL = vm.apiBase + "members/" + vm.memberID + "/boards?key=" + vm.applicationKey + "&token=" + vm.token;
    //var getListsURL = vm.apiBase + "boards/" + board.id + "?lists=open&list_fields=name&fields=name&key=" + vm.applicationKey + "&token=" + vm.token;
    //var getCardsURL = vm.apiBase + "lists/" + list.id + "?cards=open&card_fields=name&key=" + vm.applicationKey + "&token=" + vm.token;

    //var getMemberID = function () {
    //    return $http.get(getMemberURL)
    //        .then(function (response) {
    //            vm.memberID = response.data.idMember;
    //            //getBoardsForUser();
    //            //Use success to cascade the call to get the boards etc.
    //            //Not sure if this is going to work
    //        });
    //};

    //var getBoardsForUser = function () {
    //    $http.get(getBoardsURL)
    //        .then(function (response) {
    //            vm.boards = response.data;
    //            angular.forEach(vm.boards, function (board, key) {
    //                getListsForBoard(board);
    //            });
    //        });
    //};

    //var getListsForBoard = function (board) {
    //    $http.get(getListsURL)
    //        .then(function (response) {
    //            board.lists = response.data.lists;
    //            //Get all the cards
    //            angular.forEach(board.lists, function (list, key) {
    //                getCardsForList(list);
    //            });
    //        });
    //};

    //var getCardsForList = function (list) {
    //    $http.get(getCardsURL)
    //        .then(function (response) {
    //            $http.get(getCardsURL)
    //                   .then(function (response) {
    //                       list.cards = response.data.cards;
    //                       //Get all the comments
    //                       angular.forEach(list.cards, function (card, key) {
    //                           $http.get(vm.apiBase + "cards/" + card.id + "/actions?key=" + vm.applicationKey + "&token=" + vm.token)
    //                              .then(function (response) {
    //                                  card.comments = response.data.filter(function (action) { return action.type == "commentCard" });
    //                              });
    //                       });

    //                   });
    //        });
    //};

    ////TODO figure out the best way to break free of the cascading api calls!!!!
    //var callTrelloAPI = function (url, callback) {
    //    $http.get(url).then(callback());
    //};

    //getMemberID().Success(GetBoards().Success(getListsForBoard()))

</script>
